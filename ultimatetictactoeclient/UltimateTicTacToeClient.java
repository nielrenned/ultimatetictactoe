/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ultimatetictactoeclient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import javax.swing.JOptionPane;
import ultimatetictactoegame.*;


/**
 *
 * @author Jacob
 */
public class UltimateTicTacToeClient extends javax.swing.JFrame {
    
    UltimateTicTacToeGame game;
    
    boolean networkedGame;
    boolean myTurn;
    
    Socket serverConnection;
    BufferedReader serverReader;
    PrintWriter serverWriter;
    
    /**
     * Creates new form UltimateTicTacToeClient
     */
    public UltimateTicTacToeClient() {
        
        int firstPlayer = Board.X;
        
        Object[] possibleValues = { "Networked", "Local" };
        int selectedValue = (Integer)JOptionPane.showOptionDialog(null, "What type of game?", "Choose one", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, possibleValues, possibleValues[0]);
        if (selectedValue == 1) {
            networkedGame = false;
        } else {
            System.out.println("Networked game");
            networkedGame = true;
            connectToServer();
            try {
                firstPlayer = Integer.parseInt(serverReader.readLine());
                System.out.println(firstPlayer);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Couldn't get first player from server. Exiting.");
                System.exit(1);
            }
            myTurn = (firstPlayer == Board.X);
            if (myTurn) {
                System.out.println("I go first.");
            }
            if (!myTurn) {
                System.out.println("I go second.");
                getOpponentsMove();
            }
        }
        
        game = new UltimateTicTacToeGame(false, firstPlayer);
        initComponents();
        if (networkedGame) {
            undoButton.setEnabled(false);
        }
        updateTurnLabel();
    }
    
    private void connectToServer() {
        String serverIP = (String)JOptionPane.showInputDialog("What is the server IP and port number?");
        try {
            String[] components = serverIP.split(":");
            serverConnection = new Socket(components[0], Integer.parseInt(components[1]));
            serverReader = new BufferedReader(new InputStreamReader(serverConnection.getInputStream()));
            serverWriter = new PrintWriter(serverConnection.getOutputStream(), true);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Could not connect to server. Exiting.");
            System.exit(1);
        }
    }
    
    private void updateTurnLabel() {
        turnLabel.setText("Turn: " + (game.whoseTurn == Board.X ? "X" : "O"));
    }
    
    public void clicked(int board, int tile) {
        if (networkedGame && !myTurn)
            return;
        if (game.markTile(board, tile)) {
            updateTurnLabel();
            jPanel1.repaint();
            if (networkedGame) {
                serverWriter.println("" + board + tile);
                myTurn = false;
                getOpponentsMove();
            }
        }
    }
    
    private void getOpponentsMove() {
        Thread t = new Thread() {
            @Override
            public void run() {
                String move = null;
                try {
                    move = serverReader.readLine();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Getting opponent's move failed. Exiting.");
                    System.exit(1);
                }
                int board = Integer.parseInt(move.substring(0, 1));
                int tile = Integer.parseInt(move.substring(1, 2));
                game.markTile(board, tile);
                myTurn = true;
                updateTurnLabel();
                jPanel1.repaint();
            }
        };
        t.start();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new UltimateTicTacToePanel(game, this);
        undoButton = new javax.swing.JButton();
        turnLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 493, Short.MAX_VALUE)
        );

        undoButton.setText("Undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        turnLabel.setText("Turn: X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(turnLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 517, Short.MAX_VALUE)
                        .addComponent(undoButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(undoButton)
                    .addComponent(turnLabel))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        if (!networkedGame) {
            game.undo();
            jPanel1.repaint();
        }
    }//GEN-LAST:event_undoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UltimateTicTacToeClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UltimateTicTacToeClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UltimateTicTacToeClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UltimateTicTacToeClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UltimateTicTacToeClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel turnLabel;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables
}
